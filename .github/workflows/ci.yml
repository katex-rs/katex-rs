name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    name: Format Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  check:
    name: Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-check-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-check-
            ${{ runner.os }}-cargo-

      - name: Check code
        run: cargo check --all-targets --all-features

  clippy:
    name: Clippy Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-clippy-
            ${{ runner.os }}-cargo-
        
      - name: Run clippy
        continue-on-error: true
        run: 
          cargo clippy --all-targets --all-features --workspace

  test:
    name: Unit and Integration Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@nightly

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-

      - name: Install cargo-nextest
        run: cargo install --locked cargo-nextest

      - name: Run unit and integration tests
        run: cargo nextest run --no-fail-fast --all-features --workspace --profile ci
      
      - name: Publish test report
        uses: dorny/test-reporter@v2
        if: ${{ !cancelled() }}
        with:
          name: Unit and Integration Tests
          path: target/nextest/ci/junit.xml
          reporter: jest-junit
          fail-on-error: false

  doc-test:
    name: Documentation Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    continue-on-error: true  # Allow doc tests to fail as they have existing issues
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-doc-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-doc-
            ${{ runner.os }}-cargo-

      - name: Run doc tests
        run: cargo test --doc --all-features --workspace

  browser-test:
    name: Browser Tests (Screenshots) - ${{ matrix.browser }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            browser: chrome
          - os: ubuntu-latest
            browser: firefox
          - os: macos-15
            browser: safari
    permissions:
      contents: read
    continue-on-error: true  # Allow this job to fail without failing the overall workflow
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown

      - name: Cache cargo registry and node modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            KaTeX/node_modules
          key: ${{ runner.os }}-cargo-wasm-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-wasm-
            ${{ runner.os }}-cargo-

      - name: Install wasm-pack
        run: cargo install wasm-pack

      - name: Install Firefox
        if: ${{ matrix.browser == 'firefox' }}
        uses: browser-actions/setup-firefox@v1

      - name: Install Geckodriver
        if: ${{ matrix.browser == 'firefox' }}
        uses: browser-actions/setup-geckodriver@latest

      - name: Install Chrome
        if: ${{ matrix.browser == 'chrome' }}
        uses: browser-actions/setup-chrome@v2

      - name: Install Chromedriver
        if: ${{ matrix.browser == 'chrome' }}
        uses: nanasess/setup-chromedriver@v2

      - name: Enable Safari WebDriver
        if: ${{ matrix.browser == 'safari' }}
        run: sudo safaridriver --enable

      - uses: actions/setup-node@v5
        with:
          node-version: 22
      
      - name: Setup Cache for npm
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            KaTeX/node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('KaTeX/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Setup yarn
        run: corepack enable && corepack prepare yarn@stable --activate

      - name: Install NPM dependencies for KaTeX
        run: yarn install
        working-directory: ./KaTeX

      - name: Run browser tests
        run: |
          cargo xtask screenshotter --browser ${{ matrix.browser }} --allow-js-fallback

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: browser-test-results-${{ matrix.os }}-${{ matrix.browser }}
          path: |
            artifacts/screenshots/diff
            artifacts/screenshots/new
          retention-days: 7

